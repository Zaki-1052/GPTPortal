// Message Handling Module
// Manages message display, rendering, and interactions

class MessageHandler {
  constructor() {
    this.messageCounter = 0;
    this.conversationHistory = [];
    this.markdownRenderer = null;
    this.sanitizer = null;
    this.latexRenderer = null;
    this.latexEnabled = false;
    
    this.init();
  }

  /**
   * Initialize message handler
   */
  init() {
    this.setupMarkdown();
    this.setupLaTeX();
    this.setupEventHandlers();
    console.log('Message handler initialized');
  }

  /**
   * Setup markdown rendering
   */
  setupMarkdown() {
    console.log('=== setupMarkdown called ===');
    console.log('typeof marked:', typeof marked);
    
    if (typeof marked !== 'undefined') {
      this.markdownRenderer = marked;
      marked.setOptions({
        breaks: true,
        highlight: function(code, lang) {
          if (typeof hljs !== 'undefined') {
            const language = hljs.getLanguage(lang) ? lang : 'plaintext';
            return hljs.highlight(code, { language }).value;
          }
          return code;
        }
      });
      console.log('Markdown renderer configured successfully');
      console.log('this.markdownRenderer:', !!this.markdownRenderer);
    } else {
      console.warn('Marked.js not available - markdown rendering disabled');
    }

    if (typeof DOMPurify !== 'undefined') {
      this.sanitizer = DOMPurify;
      console.log('DOMPurify sanitizer available');
    } else {
      console.warn('DOMPurify not available - HTML sanitization disabled');
    }
  }

  /**
   * Setup LaTeX rendering
   */
  setupLaTeX() {
    console.log('=== setupLaTeX called ===');
    console.log('typeof katex:', typeof katex);
    
    if (typeof katex !== 'undefined') {
      this.latexRenderer = katex;
      this.latexEnabled = true;
      console.log('✓ KaTeX LaTeX renderer available');
      console.log('LaTeX enabled set to:', this.latexEnabled);
    } else {
      console.warn('KaTeX not available - LaTeX rendering disabled');
      this.latexEnabled = false;
      console.log('LaTeX enabled set to:', this.latexEnabled);
    }
  }

  /**
   * Extract LaTeX expressions and replace with placeholders
   * @param {string} text - Text containing LaTeX expressions
   * @returns {Object} Object with processed text and LaTeX map
   */
  extractLaTeX(text) {
    const latexMap = new Map();
    let counter = 0;
    let processedText = text;
    
    // Use Unicode private use area characters as markers that won't be transformed by markdown
    const MARKER_START = '\uE000';
    const MARKER_END = '\uE001';
    
    console.log('=== extractLaTeX called ===');
    console.log('Input text:', text);
    
    // Extract \begin{equation}...\end{equation} blocks first
    processedText = processedText.replace(/\\begin\{equation\}([\s\S]*?)\\end\{equation\}/g, (match, content) => {
      const placeholder = `${MARKER_START}LATEX${counter}${MARKER_END}`;
      latexMap.set(placeholder, {
        content: content.trim(),
        displayMode: true,
        original: match
      });
      counter++;
      console.log(`Extracted equation environment: ${match} → ${placeholder}`);
      return placeholder;
    });
    
    // Extract display math \[...\]
    processedText = processedText.replace(/\\\[([\s\S]*?)\\\]/g, (match, content) => {
      const placeholder = `${MARKER_START}LATEX${counter}${MARKER_END}`;
      latexMap.set(placeholder, {
        content: content.trim(),
        displayMode: true,
        original: match
      });
      counter++;
      console.log(`Extracted display math \\[...\\]: ${match} → ${placeholder}`);
      return placeholder;
    });
    
    // Extract display math $$...$$ (ensure the $$ are actually adjacent)
    processedText = processedText.replace(/\$\$([\s\S]*?)\$\$/g, (match, content) => {
      const placeholder = `${MARKER_START}LATEX${counter}${MARKER_END}`;
      latexMap.set(placeholder, {
        content: content.trim(),
        displayMode: true,
        original: match
      });
      counter++;
      console.log(`Extracted display math $$...$$: ${match} → ${placeholder}`);
      return placeholder;
    });
    
    // Extract inline math \(...\)
    processedText = processedText.replace(/\\\(([\s\S]*?)\\\)/g, (match, content) => {
      const placeholder = `${MARKER_START}LATEX${counter}${MARKER_END}`;
      latexMap.set(placeholder, {
        content: content.trim(),
        displayMode: false,
        original: match
      });
      counter++;
      console.log(`Extracted inline paren math: ${match} → ${placeholder}`);
      return placeholder;
    });
    
    // Extract inline math $...$ with more careful pattern
    // This pattern ensures we don't match $ signs that are not meant for LaTeX
    processedText = processedText.replace(/(?<!\$)\$(?!\$)([^\$\n]+?)\$(?!\$)/g, (match, content) => {
      // Additional check: content should look like LaTeX (contains backslash, ^, _, etc.)
      if (!/[\\^_{}]/.test(content)) {
        return match; // Not LaTeX, return original
      }
      const placeholder = `${MARKER_START}LATEX${counter}${MARKER_END}`;
      latexMap.set(placeholder, {
        content: content.trim(),
        displayMode: false,
        original: match
      });
      counter++;
      console.log(`Extracted inline dollar math: ${match} → ${placeholder}`);
      return placeholder;
    });
    
    console.log(`Extracted ${counter} LaTeX expressions`);
    console.log('Processed text:', processedText);
    
    return { processedText, latexMap };
  }
  
  /**
   * Restore LaTeX placeholders with rendered content
   * @param {string} html - HTML with placeholders
   * @param {Map} latexMap - Map of placeholders to LaTeX content
   * @returns {string} HTML with rendered LaTeX
   */
  restoreLaTeX(html, latexMap) {
    if (!this.latexEnabled || latexMap.size === 0) return html;
    
    console.log('=== restoreLaTeX called ===');
    console.log('LaTeX map size:', latexMap.size);
    console.log('Input HTML:', html);
    
    let restoredHtml = html;
    
    // Replace each placeholder with rendered LaTeX
    for (const [placeholder, data] of latexMap) {
      console.log(`Restoring ${placeholder}...`);
      
      try {
        const rendered = katex.renderToString(data.content, {
          displayMode: data.displayMode,
          throwOnError: false,
          trust: false,
          strict: 'warn',
          errorColor: '#cc0000'
        });
        
        // Replace all occurrences of this placeholder
        // The Unicode markers should have survived markdown processing
        const escapedPlaceholder = placeholder.replace(/[\uE000\uE001]/g, (char) => {
          return '\\u' + ('0000' + char.charCodeAt(0).toString(16)).slice(-4);
        });
        const regex = new RegExp(escapedPlaceholder, 'g');
        restoredHtml = restoredHtml.replace(regex, rendered);
        console.log(`Successfully rendered ${data.displayMode ? 'display' : 'inline'} math: ${data.content}`);
      } catch (error) {
        console.warn(`LaTeX rendering error for ${placeholder}:`, error.message);
        // On error, show the original LaTeX notation with error styling
        const errorHtml = `<span class="latex-error" title="LaTeX Error: ${error.message}">${this.escapeHtml(data.original)}</span>`;
        restoredHtml = restoredHtml.replace(new RegExp(placeholder.replace(/[\uE000\uE001]/g, '\\$&'), 'g'), errorHtml);
      }
    }
    
    console.log('Final restored HTML:', restoredHtml);
    console.log('=== restoreLaTeX completed ===');
    return restoredHtml;
  }
  
  /**
   * Escape HTML special characters
   * @param {string} text - Text to escape
   * @returns {string} Escaped text
   */
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Setup event handlers
   */
  setupEventHandlers() {
    // Listen for copy button clicks
    document.addEventListener('click', (e) => {
      if (e.target.matches('.copy-btn, .copy-code-btn')) {
        this.handleCopyClick(e);
      }
    });
  }

  /**
   * Handle copy button clicks
   * @param {Event} event - Click event
   */
  handleCopyClick(event) {
    const button = event.target;
    const textToCopy = button.dataset.copyText || button.previousElementSibling?.textContent;
    
    if (textToCopy) {
      this.copyToClipboard(textToCopy);
      this.showCopyFeedback(button);
    }
  }

  /**
   * Show copy feedback on button
   * @param {HTMLElement} button - Copy button
   */
  showCopyFeedback(button) {
    const originalText = button.textContent;
    button.textContent = 'Copied!';
    button.style.backgroundColor = '#4CAF50';
    
    setTimeout(() => {
      button.textContent = originalText;
      button.style.backgroundColor = '';
    }, 1500);
  }

  /**
   * Display a message in the chat
   * @param {string} message - Message content
   * @param {string} type - Message type ('user', 'response', 'error', 'system')
   * @param {boolean} shouldReadAloud - Whether to read message aloud
   * @returns {HTMLElement} Created message element
   */
  displayMessage(message, type, shouldReadAloud = false) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', type);
    messageElement.dataset.messageId = `msg-${this.messageCounter++}`;
    messageElement.dataset.timestamp = new Date().toISOString();

    // Handle different message types
    switch (type) {
      case 'image':
        this.renderImageMessage(messageElement, message);
        break;
      case 'error':
        this.renderErrorMessage(messageElement, message);
        break;
      case 'system':
        this.renderSystemMessage(messageElement, message);
        break;
      default:
        this.renderTextMessage(messageElement, message, type);
        break;
    }

    // Add message to chat box
    this.appendToChat(messageElement);

    // Add to conversation history
    if (type !== 'error' && type !== 'system') {
      this.addToHistory(type === 'user' ? 'user' : 'assistant', message);
    }

    // Voice feedback
    if (type === 'response' && shouldReadAloud && window.callTTSAPI) {
      window.callTTSAPI(message);
    }

    return messageElement;
  }

  /**
   * Render image message
   * @param {HTMLElement} element - Message element
   * @param {string} imageSrc - Image source URL
   */
  renderImageMessage(element, imageSrc) {
    const imageElement = document.createElement('img');
    imageElement.src = imageSrc;
    imageElement.alt = "Generated Image";
    imageElement.classList.add('generated-image');
    imageElement.style.cssText = 'max-width: 100%; height: auto; border-radius: 8px;';
    
    element.appendChild(imageElement);
    
    // Add download button
    const downloadBtn = this.createButton('Download', () => {
      this.downloadImage(imageSrc);
    });
    downloadBtn.style.marginTop = '10px';
    element.appendChild(downloadBtn);
  }

  /**
   * Render error message
   * @param {HTMLElement} element - Message element
   * @param {string} message - Error message
   */
  renderErrorMessage(element, message) {
    element.style.color = '#e66767';
    element.style.backgroundColor = '#2a1f1f';
    element.style.border = '1px solid #e66767';
    element.style.borderRadius = '8px';
    element.style.padding = '12px';
    
    const icon = document.createElement('span');
    icon.textContent = '⚠️ ';
    icon.style.marginRight = '8px';
    
    const text = document.createElement('span');
    text.textContent = message;
    
    element.appendChild(icon);
    element.appendChild(text);
  }

  /**
   * Render system message
   * @param {HTMLElement} element - Message element
   * @param {string} message - System message
   */
  renderSystemMessage(element, message) {
    element.style.color = '#888';
    element.style.backgroundColor = '#1a1a1a';
    element.style.border = '1px solid #333';
    element.style.borderRadius = '8px';
    element.style.padding = '8px 12px';
    element.style.fontStyle = 'italic';
    element.style.fontSize = '14px';
    
    const icon = document.createElement('span');
    icon.textContent = 'ℹ️ ';
    icon.style.marginRight = '6px';
    
    const text = document.createElement('span');
    text.textContent = message;
    
    element.appendChild(icon);
    element.appendChild(text);
  }

  /**
   * Render text message with markdown and code blocks
   * @param {HTMLElement} element - Message element
   * @param {string} message - Message content
   * @param {string} type - Message type
   */
  renderTextMessage(element, message, type) {
    console.log('=== renderTextMessage called ===');
    console.log('Message type:', type);
    console.log('Message contains code blocks:', message.includes('```'));
    
    if (message.includes('```')) {
      this.renderMessageWithCodeBlocks(element, message);
    } else {
      this.renderSimpleTextMessage(element, message);
    }

    // Add main copy button
    const copyButton = this.createCopyButton(message);
    element.appendChild(copyButton);
  }

  /**
   * Render message with code blocks
   * @param {HTMLElement} element - Message element
   * @param {string} message - Message with code blocks
   */
  renderMessageWithCodeBlocks(element, message) {
    console.log('=== renderMessageWithCodeBlocks called ===');
    console.log('Message contains code blocks, splitting...');
    
    const parts = message.split(/(```[\s\S]+?```)/);
    
    parts.forEach(part => {
      if (part.startsWith('```') && part.endsWith('```')) {
        // Handle code blocks
        console.log('Rendering code block...');
        this.renderCodeBlock(element, part);
      } else {
        // Handle regular text
        console.log('Rendering regular text part (will process LaTeX)...');
        this.renderMarkdownText(element, part);
      }
    });
  }

  /**
   * Render code block
   * @param {HTMLElement} parent - Parent element
   * @param {string} codeBlock - Code block text
   */
  renderCodeBlock(parent, codeBlock) {
    const codeContent = codeBlock.substring(3, codeBlock.length - 3);
    const languageMatch = codeContent.match(/^[^\n]+/);
    const language = languageMatch ? languageMatch[0].trim() : '';
    const actualCode = codeContent.replace(/^[^\n]+/, '').trim();

    // Create code container
    const codeContainer = document.createElement('div');
    codeContainer.className = 'code-block';
    codeContainer.style.cssText = 'position: relative; margin: 10px 0; background-color: #1e1e1e; border-radius: 8px; overflow: hidden;';

    // Add language label if present
    if (language) {
      const langLabel = document.createElement('div');
      langLabel.className = 'code-language';
      langLabel.textContent = language;
      langLabel.style.cssText = 'background-color: #333; color: #888; padding: 6px 12px; font-size: 12px; border-bottom: 1px solid #444;';
      codeContainer.appendChild(langLabel);
    }

    // Create pre/code elements
    const pre = document.createElement('pre');
    pre.style.cssText = 'margin: 0; padding: 16px; overflow-x: auto; background-color: transparent;';
    
    const codeElement = document.createElement('code');
    codeElement.textContent = actualCode;
    codeElement.className = language ? `language-${language}` : '';
    
    // Apply syntax highlighting if available
    if (typeof hljs !== 'undefined' && language) {
      try {
        const highlighted = hljs.highlight(actualCode, { language: hljs.getLanguage(language) ? language : 'plaintext' });
        codeElement.innerHTML = highlighted.value;
      } catch (e) {
        console.warn('Syntax highlighting failed:', e);
      }
    }
    
    pre.appendChild(codeElement);
    codeContainer.appendChild(pre);

    // Add copy code button
    const copyCodeButton = this.createCopyButton(actualCode, 'Copy Code');
    copyCodeButton.style.cssText = 'position: absolute; top: 8px; right: 8px; background-color: #444; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;';
    copyCodeButton.addEventListener('mouseenter', () => {
      copyCodeButton.style.backgroundColor = '#555';
    });
    copyCodeButton.addEventListener('mouseleave', () => {
      copyCodeButton.style.backgroundColor = '#444';
    });
    
    codeContainer.appendChild(copyCodeButton);
    parent.appendChild(codeContainer);
  }

  /**
   * Render markdown text
   * @param {HTMLElement} parent - Parent element
   * @param {string} text - Text to render
   */
  renderMarkdownText(parent, text) {
    console.log('=== renderMarkdownText called ===');
    console.log('LaTeX enabled:', this.latexEnabled);
    console.log('Input text:', text);
    console.log('Markdown renderer available:', !!this.markdownRenderer);
    
    const textSpan = document.createElement('div');
    textSpan.className = 'message-text';
    
    let processedHtml = '';
    let latexMap = new Map();
    
    // Extract LaTeX expressions BEFORE markdown processing
    if (this.latexEnabled) {
      console.log('Extracting LaTeX expressions before markdown...');
      const extracted = this.extractLaTeX(text);
      text = extracted.processedText;
      latexMap = extracted.latexMap;
    }
    
    // Process markdown on text with placeholders
    if (this.markdownRenderer) {
      processedHtml = this.markdownRenderer.parse(text);
      console.log('Markdown processed, output HTML:', processedHtml);
    } else {
      // Fallback to plain text if no markdown renderer
      console.log('No markdown renderer available, using plain text fallback');
      processedHtml = this.escapeHtml(text);
    }
    
    // Restore LaTeX expressions after markdown processing
    if (this.latexEnabled && latexMap.size > 0) {
      console.log('Restoring LaTeX expressions after markdown...');
      processedHtml = this.restoreLaTeX(processedHtml, latexMap);
    }
    
    // Finally sanitize the HTML
    if (this.sanitizer) {
      const safeHtml = this.sanitizer.sanitize(processedHtml, {
        ADD_TAGS: ['span'],
        ADD_ATTR: ['class', 'style'] // Allow KaTeX styling
      });
      textSpan.innerHTML = safeHtml;
    } else {
      // If no sanitizer, still set the HTML (less safe)
      textSpan.innerHTML = processedHtml;
    }
    
    parent.appendChild(textSpan);
  }

  /**
   * Render simple text message
   * @param {HTMLElement} element - Message element
   * @param {string} message - Message text
   */
  renderSimpleTextMessage(element, message) {
    console.log('=== renderSimpleTextMessage called ===');
    console.log('LaTeX enabled:', this.latexEnabled);
    console.log('Input message:', message);
    
    const messageText = document.createElement('div');
    messageText.className = 'message-text';
    
    let processedHtml = '';
    let latexMap = new Map();
    
    // Extract LaTeX expressions BEFORE markdown processing
    if (this.latexEnabled) {
      console.log('Extracting LaTeX expressions before markdown...');
      const extracted = this.extractLaTeX(message);
      message = extracted.processedText;
      latexMap = extracted.latexMap;
    }
    
    // Process markdown on text with placeholders
    if (this.markdownRenderer) {
      processedHtml = this.markdownRenderer.parse(message);
      console.log('Markdown processed');
    } else {
      // Fallback to plain text if no markdown renderer
      processedHtml = this.escapeHtml(message);
    }
    
    // Restore LaTeX expressions after markdown processing
    if (this.latexEnabled && latexMap.size > 0) {
      console.log('Restoring LaTeX expressions after markdown...');
      processedHtml = this.restoreLaTeX(processedHtml, latexMap);
    }
    
    // Finally sanitize the HTML
    if (this.sanitizer) {
      const safeHtml = this.sanitizer.sanitize(processedHtml, {
        ADD_TAGS: ['span'],
        ADD_ATTR: ['class', 'style'] // Allow KaTeX styling
      });
      messageText.innerHTML = safeHtml;
    } else {
      // If no sanitizer, still set the HTML (less safe)
      messageText.innerHTML = processedHtml;
    }

    element.appendChild(messageText);
  }

  /**
   * Create copy button
   * @param {string} textToCopy - Text to copy
   * @param {string} buttonText - Button text
   * @returns {HTMLElement} Copy button
   */
  createCopyButton(textToCopy, buttonText = 'Copy') {
    const button = this.createButton(buttonText, () => {
      this.copyToClipboard(textToCopy);
      this.showCopyFeedback(button);
    });
    
    button.className = 'copy-btn';
    button.dataset.copyText = textToCopy;
    
    return button;
  }

  /**
   * Create button element
   * @param {string} text - Button text
   * @param {Function} onClick - Click handler
   * @returns {HTMLElement} Button element
   */
  createButton(text, onClick) {
    const button = document.createElement('button');
    button.textContent = text;
    button.style.cssText = `
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
      margin: 4px 4px 0 0;
      transition: background-color 0.2s;
    `;
    
    button.addEventListener('click', onClick);
    
    button.addEventListener('mouseenter', () => {
      button.style.backgroundColor = '#45a049';
    });
    
    button.addEventListener('mouseleave', () => {
      button.style.backgroundColor = '#4CAF50';
    });
    
    return button;
  }

  /**
   * Append message to chat box
   * @param {HTMLElement} messageElement - Message element to append
   */
  appendToChat(messageElement) {
    const chatBox = document.getElementById('chat-box');
    if (chatBox) {
      chatBox.appendChild(messageElement);
      chatBox.scrollTop = chatBox.scrollHeight;
      
      // Add entrance animation
      messageElement.style.opacity = '0';
      messageElement.style.transform = 'translateY(20px)';
      
      requestAnimationFrame(() => {
        messageElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        messageElement.style.opacity = '1';
        messageElement.style.transform = 'translateY(0)';
      });
    }
  }

  /**
   * Add message to conversation history
   * @param {string} role - Role ('user' or 'assistant')
   * @param {string} content - Message content
   */
  addToHistory(role, content) {
    this.conversationHistory.push({
      role: role,
      content: content,
      timestamp: new Date().toISOString()
    });
    
    // Limit history size to prevent memory issues
    const maxHistorySize = 100;
    if (this.conversationHistory.length > maxHistorySize) {
      this.conversationHistory = this.conversationHistory.slice(-maxHistorySize);
    }
  }

  /**
   * Get conversation history
   * @returns {Array} Conversation history
   */
  getConversationHistory() {
    return [...this.conversationHistory];
  }

  /**
   * Clear conversation history
   */
  clearHistory() {
    this.conversationHistory = [];
    console.log('Conversation history cleared');
  }

  /**
   * Clear chat display
   */
  clearChat() {
    const chatBox = document.getElementById('chat-box');
    if (chatBox) {
      chatBox.innerHTML = '';
    }
    this.clearHistory();
    this.messageCounter = 0;
    console.log('Chat cleared');
  }

  /**
   * Copy text to clipboard
   * @param {string} text - Text to copy
   */
  copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
      console.log('Text copied to clipboard!');
    }).catch(err => {
      console.error('Error copying text: ', err);
      // Fallback for older browsers
      this.fallbackCopyToClipboard(text);
    });
  }

  /**
   * Fallback copy method for older browsers
   * @param {string} text - Text to copy
   */
  fallbackCopyToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
      document.execCommand('copy');
      console.log('Text copied using fallback method');
    } catch (err) {
      console.error('Fallback copy failed:', err);
    }
    
    document.body.removeChild(textArea);
  }

  /**
   * Download image
   * @param {string} imageSrc - Image source URL
   */
  downloadImage(imageSrc) {
    const link = document.createElement('a');
    link.href = imageSrc;
    link.download = `generated-image-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  /**
   * Format message timestamp
   * @param {string} timestamp - ISO timestamp
   * @returns {string} Formatted timestamp
   */
  formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  /**
   * Get message by ID
   * @param {string} messageId - Message ID
   * @returns {HTMLElement|null} Message element or null
   */
  getMessageById(messageId) {
    return document.querySelector(`[data-message-id="${messageId}"]`);
  }

  /**
   * Update message content
   * @param {string} messageId - Message ID
   * @param {string} newContent - New content
   */
  updateMessage(messageId, newContent) {
    const messageElement = this.getMessageById(messageId);
    if (messageElement) {
      const textElement = messageElement.querySelector('.message-text');
      if (textElement) {
        if (this.markdownRenderer && this.sanitizer) {
          const rawHtml = this.markdownRenderer.parse(newContent);
          const safeHtml = this.sanitizer.sanitize(rawHtml);
          textElement.innerHTML = safeHtml;
        } else {
          textElement.textContent = newContent;
        }
      }
    }
  }

  /**
   * Remove message by ID
   * @param {string} messageId - Message ID
   */
  removeMessage(messageId) {
    const messageElement = this.getMessageById(messageId);
    if (messageElement) {
      messageElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      messageElement.style.opacity = '0';
      messageElement.style.transform = 'translateX(-100%)';
      
      setTimeout(() => {
        if (messageElement.parentNode) {
          messageElement.parentNode.removeChild(messageElement);
        }
      }, 300);
    }
  }

  /**
   * Export conversation as text
   * @returns {string} Conversation text
   */
  exportAsText() {
    return this.conversationHistory.map(msg => {
      const role = msg.role === 'user' ? 'You' : 'Assistant';
      const timestamp = this.formatTimestamp(msg.timestamp);
      return `[${timestamp}] ${role}: ${msg.content}`;
    }).join('\n\n');
  }

  /**
   * Export conversation as JSON
   * @returns {string} Conversation JSON
   */
  exportAsJSON() {
    return JSON.stringify({
      conversation: this.conversationHistory,
      exportedAt: new Date().toISOString(),
      messageCount: this.conversationHistory.length
    }, null, 2);
  }

  /**
   * Show copy feedback
   * @param {HTMLElement} button - Copy button element
   */
  showCopyFeedback(button) {
    const originalText = button.textContent;
    button.textContent = 'Copied!';
    button.style.backgroundColor = '#45a049';
    
    setTimeout(() => {
      button.textContent = originalText;
      button.style.backgroundColor = '#4CAF50';
    }, 1500);
  }

  /**
   * Escape HTML special characters
   * @param {string} text - Text to escape
   * @returns {string} Escaped text
   */
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Extract LaTeX expressions from text and replace with placeholders
   * @param {string} text - Input text
   * @returns {Object} Processed text and LaTeX map
   */
  extractLaTeX(text) {
    console.log('=== extractLaTeX called ===');
    console.log('Full input text:');
    console.log(text);
    console.log('Text length:', text.length);
    console.log('---');
    
    const latexMap = new Map();
    let processedText = text;
    let placeholderIndex = 0;
    
    // Helper function to check if a match is valid LaTeX
    const isValidLaTeX = (match, fullText, matchIndex) => {
      // Check if it's part of a descriptive sentence
      const beforeMatch = fullText.substring(Math.max(0, matchIndex - 20), matchIndex);
      const afterMatch = fullText.substring(matchIndex + match.length, matchIndex + match.length + 20);
      
      console.log(`Validating match: "${match}"`);
      console.log(`Before: "${beforeMatch}"`);
      console.log(`After: "${afterMatch}"`);
      
      // Reject if it's part of a description like "double $):" or "single $):"
      if (beforeMatch.includes('double') || beforeMatch.includes('single') || 
          beforeMatch.includes('dollar') || beforeMatch.includes('backslash')) {
        console.log('REJECTED: Part of description');
        return false;
      }
      
      // Reject if followed by "):" which indicates it's part of descriptive text
      if (afterMatch.startsWith('):') || afterMatch.startsWith(' ):')) {
        console.log('REJECTED: Followed by "):" pattern');
        return false;
      }
      
      return true;
    };
    
    // Store all matches first to avoid re-processing
    const allMatches = [];
    
    // Display math with $$ - must be on line boundaries or surrounded by whitespace
    console.log('\n--- Checking for $$ display math ---');
    const displayDollarRegex = /(?:^|\n)\s*\$\$([^\$]+)\$\$\s*(?:\n|$)/gm;
    let match;
    
    while ((match = displayDollarRegex.exec(text)) !== null) {
      console.log(`Found potential $$ match at index ${match.index}:`, match[0]);
      if (isValidLaTeX(match[0], text, match.index)) {
        allMatches.push({
          type: 'display',
          match: match[0],
          content: match[1].trim(),
          index: match.index
        });
        console.log('ACCEPTED: Valid display math');
      }
    }
    
    // Display math with \[ \] - typically at line start
    console.log('\n--- Checking for \\[ \\] display math ---');
    const displayBracketRegex = /(?:^|\n)\s*\\\[([^\]]+)\\\]\s*(?:\n|$)/gm;
    
    while ((match = displayBracketRegex.exec(text)) !== null) {
      console.log(`Found potential \\[ \\] match at index ${match.index}:`, match[0]);
      if (isValidLaTeX(match[0], text, match.index)) {
        allMatches.push({
          type: 'display',
          match: match[0],
          content: match[1].trim(),
          index: match.index
        });
        console.log('ACCEPTED: Valid display math');
      }
    }
    
    // LaTeX environments - must be at line start
    console.log('\n--- Checking for LaTeX environments ---');
    const environmentRegex = /(?:^|\n)\s*\\begin\{(\w+)\}([\s\S]*?)\\end\{\1\}/gm;
    
    while ((match = environmentRegex.exec(text)) !== null) {
      console.log(`Found environment at index ${match.index}:`, match[0]);
      if (isValidLaTeX(match[0], text, match.index)) {
        allMatches.push({
          type: 'environment',
          match: match[0],
          environment: match[1],
          content: match[2].trim(),
          index: match.index
        });
        console.log('ACCEPTED: Valid LaTeX environment');
      }
    }
    
    // Inline math with \( \) - more reliable than $
    console.log('\n--- Checking for \\( \\) inline math ---');
    const inlineParenRegex = /\\\(([^)]+)\\\)/g;
    
    while ((match = inlineParenRegex.exec(text)) !== null) {
      console.log(`Found potential \\( \\) match at index ${match.index}:`, match[0]);
      
      // Skip if already processed as part of a larger match
      const alreadyProcessed = allMatches.some(m => 
        match.index >= m.index && match.index < m.index + m.match.length
      );
      
      if (!alreadyProcessed && isValidLaTeX(match[0], text, match.index)) {
        allMatches.push({
          type: 'inline',
          match: match[0],
          content: match[1].trim(),
          index: match.index
        });
        console.log('ACCEPTED: Valid inline math');
      } else if (alreadyProcessed) {
        console.log('SKIPPED: Already part of larger match');
      }
    }
    
    // Inline math with $ - very restrictive to avoid false positives
    console.log('\n--- Checking for $ inline math (restrictive) ---');
    // Only match $ when surrounded by word boundaries or whitespace, not in descriptions
    const inlineDollarRegex = /(?:^|[\s,;.!?])\$([^\$\n]{1,100})\$(?=[\s,;.!?]|$)/g;
    
    while ((match = inlineDollarRegex.exec(text)) !== null) {
      console.log(`Found potential $ match at index ${match.index}:`, match[0]);
      
      // Skip if already processed
      const alreadyProcessed = allMatches.some(m => 
        match.index >= m.index && match.index < m.index + m.match.length
      );
      
      // Additional validation for single $
      const content = match[1].trim();
      const containsLaTeXCommands = /\\[a-zA-Z]+|[\^_{}]/.test(content);
      
      console.log(`Content: "${content}"`);
      console.log(`Contains LaTeX commands: ${containsLaTeXCommands}`);
      
      if (!alreadyProcessed && containsLaTeXCommands && isValidLaTeX(match[0], text, match.index)) {
        allMatches.push({
          type: 'inline',
          match: match[0].trim(), // Trim the whitespace from match
          content: content,
          index: match.index
        });
        console.log('ACCEPTED: Valid inline math with LaTeX commands');
      } else if (!containsLaTeXCommands) {
        console.log('REJECTED: No LaTeX commands found');
      }
    }
    
    // Sort matches by index to process in order
    allMatches.sort((a, b) => a.index - b.index);
    
    console.log(`\n--- Total accepted matches: ${allMatches.length} ---`);
    
    // Process all matches and create placeholders
    for (const matchInfo of allMatches) {
      const placeholder = `__LATEX_PLACEHOLDER_${placeholderIndex}__`;
      
      try {
        console.log(`\nRendering ${matchInfo.type} math:`, matchInfo.content);
        
        let rendered;
        if (matchInfo.type === 'environment') {
          rendered = katex.renderToString(
            `\\begin{${matchInfo.environment}}${matchInfo.content}\\end{${matchInfo.environment}}`,
            {
              displayMode: true,
              throwOnError: false,
              errorColor: '#cc0000',
              strict: 'warn',
              trust: false
            }
          );
        } else {
          rendered = katex.renderToString(matchInfo.content, {
            displayMode: matchInfo.type === 'display',
            throwOnError: false,
            errorColor: '#cc0000',
            strict: 'warn',
            trust: false
          });
        }
        
        latexMap.set(placeholder, rendered);
        processedText = processedText.replace(matchInfo.match, placeholder);
        placeholderIndex++;
        console.log(`Successfully rendered as placeholder: ${placeholder}`);
      } catch (error) {
        console.warn('LaTeX rendering error:', error);
        console.log('Failed to render, keeping original text');
      }
    }
    
    console.log('\n--- Final results ---');
    console.log('Processed text:', processedText);
    console.log('LaTeX map size:', latexMap.size);
    console.log('LaTeX placeholders:', Array.from(latexMap.keys()));
    console.log('=== extractLaTeX complete ===\n');
    
    return { processedText, latexMap };
  }

  /**
   * Restore LaTeX expressions from placeholders
   * @param {string} html - HTML with placeholders
   * @param {Map} latexMap - Map of placeholders to rendered LaTeX
   * @returns {string} HTML with LaTeX restored
   */
  restoreLaTeX(html, latexMap) {
    console.log('=== restoreLaTeX called ===');
    console.log('Input HTML:', html);
    console.log('LaTeX map size:', latexMap.size);
    
    let restoredHtml = html;
    
    // Replace placeholders with rendered LaTeX
    for (const [placeholder, rendered] of latexMap) {
      console.log(`Replacing ${placeholder} with rendered LaTeX`);
      restoredHtml = restoredHtml.replace(placeholder, rendered);
    }
    
    console.log('Restored HTML:', restoredHtml);
    console.log('=== restoreLaTeX complete ===');
    
    return restoredHtml;
  }

  /**
   * Cleanup message handler
   */
  cleanup() {
    this.clearChat();
    this.markdownRenderer = null;
    this.sanitizer = null;
    this.latexRenderer = null;
    this.latexEnabled = false;
    console.log('Message handler cleaned up');
  }
}

// Export for use in other modules
window.MessageHandler = MessageHandler;